{
  "name": "node-validation",
  "description": "A small validation library for Node.js",
  "version": "0.1.0",
  "author": {
    "name": "Jan Van Ryswyck",
    "url": "http://elegantcode.com"
  },
  "homepage": "https://github.com/JanVanRyswyck/node-validation",
  "keywords": [
    "validator",
    "validation",
    "rule",
    "rules",
    "express"
  ],
  "scripts": {
    "test": "mocha ./test/*"
  },
  "directories": {
    "lib": "./lib"
  },
  "engines": {
    "node": "0.10.x"
  },
  "devDependencies": {
    "mocha": "1.8.x",
    "chai": "1.5.x"
  },
  "readme": "# node-validation\n\nA minimal but slightly opinionated validation library for Node.js.\n\n## Install\n\n``` bash\n  $ npm install node-validation\n```\n\n## Example\n\nIn order to use the API, one needs to inherit from the base Validator. The validation rules can then be defined.\n\n``` js\nvar MyObjectValidator = function() {\n\tValidator.call(this);\n\n\tthis.ruleFor('stringProperty').isNotEmpty();\n\tthis.ruleFor('otherStringProperty').hasMaximumLength(10);\n\n\tthis.ruleFor('numericStringProperty').isNumber().withMessage('Oops, something is wrong ...');\n\tthis.ruleFor('dateStringProperty').matches(/^(19|20)\\d\\d[-](0[1-9]|1[012])[-](0[1-9]|[12][0-9]|3[01])$/);\n\n\tthis.ruleFor('numberProperty').isInteger();\n\tthis.ruleFor('otherNumberProperty').isMaximum(5);\n\n\tthis.ruleFor('exoticProperty').is(function(value) {\n\t\treturn 3 === value.propertyA + value.propertyB;\n\t}).withMessage('Either propertyA or propertyB has an incorrect value.');\n};\n\nutil.inherits(MyObjectValidator, Validator);\n```\n\nAfter creating a validator object, an object that needs to be validated (the subject) can be passed to `validate` method. \nThe `validate` method returns an array of validation errors specifying a message and the name of the violating property.\n\n``` js \n//\n// Validation subject\n//\nvar subject = {\n\tstringProperty: '',\n\totherStringProperty: 'Some string value that is too long ...',\n\n\tnumericStringProperty: '65.85 invalid',\n\tdateStringProperty: '2013-04-30 invalid',\n\n\tnumberProperty: 'Some invalid number',\n\totherNumberProperty: 48,\n\n\texoticProperty: {\n\t\tpropertyA: 1,\n\t\tpropertyB: 1\n\t}\n};\n\n//\n// Now it's time to validate\n//\nvar validator = new MyObjectValidator();\nvar validationErrors = validator.validate(subject);\n\nfor(var i=0; i < validationErrors.length; i++) {\n\tconsole.log('Property name: ' + validationErrors[i].propertyName + ', Message: ' + validationErrors[i].message);\n}\n```\n\n## List of validations\n\n#### hasMaximumLength\n\nThe length of a value must be less than or equal to a specified maximum length.\n\n#### hasMinimumLength\n\nThe length of a value must be greater than or equal to a specified minimum length.\n\n#### isEmpty\n\nThe value must be empty.\n\n#### isNotEmpty\n\nThe value cannot be empty.\n\n#### isNotNull\n\nThe value cannot be null or undefined.\n\n#### is\n\nUse a custom validation function to validate a specified value.\n\n#### isBetween\n\nThe value must be between or equal to a specified minimum and maximum value.\n\n#### isMaximum\n\nThe value must be less than or equal to a specified maximum value.\n\n#### isMinimum\n\nThe value must be greater than or equal to a specified minimum value.\n\n#### isExclusivelyBetween\n\nThe value must be between a specified minimum and maximum value.\n\n#### isExclusiveMaximum\n\nThe value must be less than a specified maximum value. \n\n#### isExclusiveMinimum\n\nThe value must be greater than a specified minimum value.\n\n#### isInteger\n\nThe value must be an integer.\n\n#### isNumber\n\nThe value must be a number.\n\n#### matches\n\nThe value must match a particular pattern (regular expression)\n\n### Custom message\n\nA custom message can be registered for a rule using the `withMessage` method.\n\n``` js \nthis.ruleFor('numericStringProperty').isNumber().withMessage('Oops, something is wrong ...');\n```\n\n## Tests\n\nClone this repository from GitHub. Go to the directory that contains the cloned source code and install the devDependencies.\n\n``` bash\n  $ npm install\n```\n\nThen run the tests.\n\n``` bash\n  $ npm run-script test\n```\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 Jan Van Ryswyck\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "README.md",
  "_id": "node-validation@0.1.0",
  "dist": {
    "shasum": "ad9f098d569780190d75d27f2b47e33caae4e017"
  },
  "_from": "node-validation@*",
  "_resolved": "https://registry.npmjs.org/node-validation/-/node-validation-0.1.0.tgz"
}
